class Solution {
    public int[][] merge(int[][] intervals) {
        List<int[]> result = new ArrayList();
        Arrays.sort(intervals, (arr1,arr2)-> Integer.compare(arr1[0],arr2[0]));
        
        for(int[] interval: intervals)
        {
            if(result.size()==0)
            {
                result.add(interval);
            }
            else
            {
                int[] previousinterval = result.get(result.size()-1);
                if(previousinterval[1]>=interval[0])
                {
                    previousinterval[1] = Math.max(previousinterval[1],interval[1]);
                }
                else
                {
                    result.add(interval);
                }
            }
        }
        int[][] res=new int[result.size()][];
        for(int i=0;i<result.size();i++)
        {
            res[i]=result.get(i);
        }
        System.out.println(Arrays.toString(res[0]));
        return res;
    }
}








Note List<int[]> =new ArrayList<int[]>(); : Amazing trick when you working with with 2d arrays (when 2d arrays given in form int[][] given to you)
Arrays.sort(intervals, (arr1,arr2)-> Integer.compare(arr1[0],arr2[0])) : Another amazing line which will be useful while sorting 2D array

the compare(arr1[0],arr[0]) indicates by which element we want to sort.

